{"version":3,"sources":["components/button/Button.js","components/score/Score.js","engine/SnakePart.js","engine/Apple.js","engine/enums.js","engine/Snake.js","components/Game/Game.js","components/mainmenu/MainMenuItem.js","components/mainmenu/MainMenu.js","components/scorestable/ScoresTable.js","routes/Main.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","onClick","text","Score","value","SnakePart","x","y","size","isHead","this","xCord","prevXCord","yCord","prevYCord","draw","bind","getPrevCords","getCurrentCords","setCurrentCords","ctx","fillStyle","fillRect","strokeRect","Apple","Directions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Snake","length","snake","snakeHead","apple","xCordStart","yCordStart","points","AWARD_FOR_APPLE","SPEED_INCREASING_INDEX","speed","SNAKE_PART_SIZE","currentDirection","nextDirection","lastTimeRedrawing","ready","rafID","gameIsEnded","initSnake","loop","setContext","setWidthLimit","setHeightLimit","setReadyStatus","getReadyStatus","drawSnake","drawEndGame","stopGame","startGame","isPlayerLost","onKeyDown","img","Image","src","callback","setGameIsOver","setScoreToUI","limit","wLimit","hLimit","status","i","xCordNext","snakePart","push","max","Math","floor","random","excludeHead","result","part","xCordSnakePart","yCordSnakePart","getRandomInt","checkForCrossWithSnake","prevPart","stepDest","forEach","getCoords","xCordApple","yCordApple","addPartToSnake","console","log","clearRect","drawImage","document","onkeydown","requestAnimationFrame","timestamp","drawApple","playerLost","movingDirection","step","e","code","undefined","Game","useState","scores","setScore","canvas","useRef","useEffect","current","getContext","width","height","setScoreSetter","setGameIsOverSetter","ref","id","preventDefault","MainMenuItem","to","link","MainMenu","TableRow","name","TableHeader","ScoresTable","content","data","localStorage","key","getItem","sort","a","b","aValue","Number","bValue","item","Main","exact","path","component","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfbe6d58.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css';\r\n\r\nfunction Button(props) {\r\n    return (\r\n    <button className=\"button\" onClick={props.onClick}>{props.text}</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './score.css';\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div className=\"score\">\r\n            <span>ОЧКИ:</span>\r\n            <span>{props.value}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Score;","class SnakePart {\r\n\r\n    constructor(x, y, size, isHead = false) {\r\n        this.xCord = this.prevXCord = x;\r\n        this.yCord = this.prevYCord = y;\r\n        this.size = size;\r\n        this.isHead = isHead;\r\n\r\n        this.draw = this.draw.bind(this);\r\n\r\n        this.getPrevCords = this.getPrevCords.bind(this);\r\n        this.getCurrentCords = this.getCurrentCords.bind(this);\r\n        this.setCurrentCords = this.setCurrentCords.bind(this);\r\n    }\r\n\r\n    getPrevCords() {\r\n        return [this.prevXCord, this.prevYCord];\r\n    }\r\n\r\n    getCurrentCords() {\r\n        return [this.xCord, this.yCord];\r\n    }\r\n\r\n    setCurrentCords(x, y) {\r\n        this.prevXCord = this.xCord;\r\n        this.prevYCord = this.yCord;\r\n\r\n        this.xCord = x;\r\n        this.yCord = y;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"rgb(0,200,0)\";\r\n        ctx.fillRect(this.xCord, this.yCord, this.size, this.size);\r\n        \r\n        ctx.fillStyle='#000';\r\n        ctx.strokeRect(this.xCord - 1, this.yCord - 1, this.size + 2, this.size + 2);\r\n    }   \r\n}\r\n\r\nexport default SnakePart;","class Apple {\r\n    constructor(x, y, size) {\r\n        this.xCord = x;\r\n        this.yCord = y;\r\n        this.size = size;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"rgb(200,0,0)\";\r\n        ctx.fillRect(this.xCord, this.yCord, this.size, this.size);\r\n        \r\n        ctx.fillStyle='#000';\r\n        ctx.strokeRect(this.xCord - 1, this.yCord - 1, this.size + 2, this.size + 2);\r\n    }\r\n\r\n    getCoords() {\r\n        return [this.xCord, this.yCord];\r\n    }\r\n}\r\n\r\nexport default Apple;","export const Directions = {\r\n    ArrowLeft: -1,\r\n    ArrowRight: 1,\r\n    ArrowUp: -2,\r\n    ArrowDown: 2,\r\n};","import SnakePart from './SnakePart';\r\nimport Apple from './Apple';\r\nimport {Directions} from './enums';\r\n\r\nclass Snake {\r\n    constructor(length, x, y) {\r\n        this.snake = [];\r\n        this.snakeHead = null;\r\n        this.apple = null;\r\n        this.xCordStart = x;\r\n        this.yCordStart = y;\r\n\r\n        this.points = 0;\r\n\r\n        this.AWARD_FOR_APPLE = 5;\r\n        this.SPEED_INCREASING_INDEX = 5;\r\n        this.speed = 300;\r\n        this.SNAKE_PART_SIZE = 25;\r\n        this.currentDirection = Directions.ArrowRight;\r\n        this.nextDirection = Directions.ArrowRight;\r\n\r\n        this.lastTimeRedrawing = null;\r\n\r\n        this.ready = false;\r\n        this.rafID = null;\r\n        this.gameIsEnded = true;\r\n\r\n        this.initSnake = this.initSnake.bind(this);\r\n        this.loop = this.loop.bind(this);\r\n        this.setContext = this.setContext.bind(this);\r\n        this.setWidthLimit = this.setWidthLimit.bind(this);\r\n        this.setHeightLimit = this.setHeightLimit.bind(this);\r\n        this.setReadyStatus = this.setReadyStatus.bind(this);\r\n        this.getReadyStatus = this.getReadyStatus.bind(this);\r\n        this.drawSnake = this.drawSnake.bind(this);\r\n        this.drawEndGame = this.drawEndGame.bind(this);\r\n        this.stopGame = this.stopGame.bind(this);\r\n        this.startGame = this.startGame.bind(this);\r\n        this.isPlayerLost = this.isPlayerLost.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n\r\n        this.initSnake(length);\r\n\r\n        this.img = new Image(400, 400);\r\n        this.img.src = '/wasted.png';\r\n    }\r\n\r\n    setGameIsOverSetter(callback) {\r\n        this.setGameIsOver = callback;\r\n    }\r\n\r\n    setScoreSetter(callback) {\r\n        this.setScoreToUI = callback;\r\n    }\r\n    \r\n    setContext(ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    setWidthLimit(limit) {\r\n        this.wLimit = limit;\r\n    }\r\n\r\n    setHeightLimit(limit) {\r\n        this.hLimit = limit;\r\n    }\r\n\r\n    setReadyStatus(status) {\r\n        this.ready = status;\r\n    }\r\n\r\n    getReadyStatus() {\r\n        return this.ready;\r\n    }\r\n\r\n    initSnake(length = 3) {\r\n        for (let i = 0; i < length; i++) {\r\n            let isHead = i === 0;\r\n            let xCordNext = this.xCordStart;\r\n            if (!isHead) {\r\n                xCordNext = this.xCordStart - (i * this.SNAKE_PART_SIZE);\r\n            }\r\n            let snakePart = new SnakePart(xCordNext, this.yCordStart, this.SNAKE_PART_SIZE, isHead);\r\n\r\n            if (isHead) {\r\n                this.snakeHead = snakePart;\r\n            }\r\n\r\n            this.snake.push(snakePart);\r\n        }\r\n    }\r\n\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    checkForCrossWithSnake(xCord, yCord, excludeHead = false) {\r\n        let result = true;\r\n\r\n        for (let part of this.snake) {\r\n            if (excludeHead && this.snakeHead === part) {\r\n                continue;\r\n            }\r\n            let [xCordSnakePart, yCordSnakePart] = part.getCurrentCords();\r\n            if (xCord === xCordSnakePart && yCord === yCordSnakePart) {\r\n                result = false;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    drawApple() {\r\n        if (!this.apple) {\r\n            let xCord, yCord;\r\n            while (true) {\r\n                xCord = this.getRandomInt(20) * 25;\r\n                yCord = this.getRandomInt(20) * 25;\r\n\r\n                if (this.checkForCrossWithSnake(xCord, yCord)) {\r\n                    break;\r\n                }\r\n            }\r\n            this.apple = new Apple(xCord, yCord, 25);\r\n        }\r\n\r\n        this.apple.draw(this.ctx);\r\n    }\r\n\r\n    drawSnake() {\r\n        if (this.snake.length === 0) {\r\n            console.log(\"The Snake hasn't been initialize.\");\r\n            return;\r\n        }     \r\n\r\n        let prevPart = null;\r\n\r\n        let stepDest = this.SNAKE_PART_SIZE;\r\n                \r\n        this.snake.forEach(part => {\r\n            // part.draw(this.ctx);\r\n\r\n            if (part === this.snakeHead) {\r\n                let [xCord, yCord] = part.getCurrentCords();\r\n                let [xCordApple, yCordApple] = this.apple.getCoords();\r\n\r\n                if (xCord === xCordApple && yCord === yCordApple) {\r\n                    //eat this apple ;)\r\n                    this.points += this.AWARD_FOR_APPLE;\r\n                    this.speed -= this.speed <= 100 ? 0 : this.SPEED_INCREASING_INDEX;\r\n                    this.apple = null;\r\n                    this.addPartToSnake();\r\n                    this.setScoreToUI(this.points);\r\n                }\r\n\r\n                switch (this.currentDirection) {\r\n                    case Directions.ArrowRight:\r\n                        xCord += stepDest; \r\n                        break;\r\n                    case Directions.ArrowLeft:\r\n                        xCord -= stepDest;\r\n                        break;\r\n                    case Directions.ArrowUp: \r\n                        yCord -= stepDest;\r\n                        break;\r\n                    case Directions.ArrowDown:\r\n                        yCord += stepDest;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                part.setCurrentCords(xCord, yCord);\r\n            }\r\n\r\n            if (prevPart) {\r\n                let [xCord, yCord] = prevPart.getPrevCords();\r\n                part.setCurrentCords(xCord, yCord);\r\n            }\r\n            part.draw(this.ctx);\r\n            prevPart = part;\r\n        });\r\n\r\n        if (!this.gameIsEnded && this.isPlayerLost()) {\r\n            this.stopGame();\r\n        }\r\n    }\r\n\r\n    drawEndGame() {        \r\n        this.ctx.clearRect(0, 0, this.wLimit, this.hLimit);\r\n        this.ctx.drawImage(this.img, 0, 0, 500, 500);\r\n    }\r\n\r\n    addPartToSnake() {\r\n        let [xCord, yCord] = this.snake[this.snake.length - 1].getCurrentCords();\r\n        let snakePart = new SnakePart(xCord, yCord, this.SNAKE_PART_SIZE);\r\n        this.snake.push(snakePart);\r\n    }\r\n\r\n    startGame() {\r\n        document.onkeydown = this.onKeyDown;\r\n\r\n        this.gameIsEnded = false;\r\n        this.points = 0;\r\n        this.rafID = requestAnimationFrame(this.loop);\r\n\r\n        this.setScoreToUI(0);\r\n\r\n    }\r\n\r\n    stopGame() {\r\n        document.onkeydown = null;\r\n        this.gameIsEnded = true;\r\n\r\n        this.setGameIsOver(true);\r\n    }\r\n\r\n    loop(timestamp) {\r\n        if (this.gameIsEnded) {\r\n            this.drawEndGame();\r\n            return;\r\n        }\r\n        if (!this.lastTimeRedrawing) {\r\n            this.lastTimeRedrawing = timestamp;\r\n        }\r\n\r\n        let timeDifference = timestamp - this.lastTimeRedrawing;\r\n\r\n        if (timeDifference >= this.speed) {\r\n            this.currentDirection = this.nextDirection;\r\n            this.ctx.clearRect(0, 0, this.wLimit, this.hLimit);\r\n            this.drawApple();\r\n            this.drawSnake();\r\n            this.lastTimeRedrawing = timestamp;\r\n        }\r\n        \r\n        this.rafID = requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    isPlayerLost() {\r\n        let playerLost = false;\r\n        let movingDirection = this.currentDirection,\r\n            step = this.SNAKE_PART_SIZE;\r\n        let [xCord, yCord] = this.snakeHead.getCurrentCords();\r\n        //check on borders\r\n        switch (movingDirection) {\r\n            case Directions.ArrowRight:\r\n                if (xCord + step > this.wLimit) {\r\n                    playerLost = true;\r\n                } \r\n                break;\r\n            case Directions.ArrowLeft:\r\n                \r\n                if (xCord < 0) {\r\n                    playerLost = true;\r\n                }\r\n                break;\r\n            case Directions.ArrowUp:\r\n                // yCord += step;\r\n                if (yCord < 0) {\r\n                    playerLost = true;\r\n                }\r\n                break;\r\n            case Directions.ArrowDown:\r\n                if (yCord + step > this.hLimit) {\r\n                    playerLost = true;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (!this.checkForCrossWithSnake(xCord, yCord, true)) {\r\n            playerLost = true;\r\n        }\r\n\r\n        return playerLost;\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        this.nextDirection = Directions[e.code];\r\n\r\n        if (this.nextDirection === undefined) {\r\n            this.nextDirection = this.currentDirection;\r\n        }\r\n\r\n        //ban the opposite directions\r\n        if (this.currentDirection === this.nextDirection * -1) {\r\n            this.nextDirection = this.currentDirection;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Snake;","import React, {useState, useEffect, useRef} from 'react';\r\nimport Button from '../button/Button';\r\nimport Score from '../score/Score';\r\nimport './game.css';\r\n\r\nimport Snake from '../../engine/Snake';\r\n\r\nfunction Game(props) { \r\n    \r\n    const [scores, setScore] = useState(0);\r\n    const [gameIsOver, setGameIsOver] = useState(false);\r\n    \r\n    const canvas = useRef(null);\r\n\r\n    const snake = new Snake(10, 0, 225);\r\n\r\n    useEffect(() => {\r\n        let ready = snake.getReadyStatus();\r\n        if (!ready) {\r\n            let ctx = canvas.current.getContext(\"2d\");\r\n            snake.setContext(ctx);\r\n            snake.setWidthLimit(canvas.current.width);\r\n            snake.setHeightLimit(canvas.current.height);\r\n            snake.setScoreSetter(setScore);\r\n            snake.setGameIsOverSetter(setGameIsOver);\r\n            snake.setReadyStatus(true);\r\n        }\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     if (gameIsOver) {\r\n    //         storeScores();\r\n    //     }\r\n    // }, [gameIsOver]);\r\n\r\n    function storeScores() {\r\n        let name = prompt('Введите имя для сохранения результата.');\r\n        if (name) {\r\n            let prevRecord = localStorage.getItem(name);\r\n            if (prevRecord && Number(prevRecord) > scores) {\r\n                console.log(\"Your previous scores record bigger than current.\");\r\n                return;\r\n            }\r\n            localStorage.setItem(name, scores);\r\n        }\r\n    }\r\n\r\n    function startGame(e) {\r\n        e.preventDefault();\r\n        setGameIsOver(false);\r\n        snake.startGame();\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Score value={scores} />\r\n            <canvas ref={canvas} id=\"gamespace\" width=\"500\" height=\"500\">\r\n                Похоже, что вы используете очень старый браузер. Вы многое теряете...\r\n            </canvas>\r\n            <Button onClick={startGame} text=\"Начать\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction MainMenuItem(props) {\r\n    return (\r\n        <li>\r\n            <Link to={props.link}>\r\n                {props.text}\r\n            </Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default MainMenuItem;","import React from 'react';\r\nimport MainMenuItem from './MainMenuItem';\r\nimport './mainmenu.css';\r\n\r\nfunction MainMenu(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h2>Змейка</h2>\r\n            <ul>\r\n                <MainMenuItem link=\"/SimpleSnake/game\" text=\"Игра\"/>\r\n                <MainMenuItem link=\"/SimpleSnake/scorestable\" text=\"Таблица результатов\" />\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainMenu;","import React from 'react';\r\nimport './scorestable.css';\r\n\r\nfunction TableRow(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.name}</td>\r\n            <td>{props.scores}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction TableHeader(props) {\r\n    return (\r\n        <tr>\r\n            <th>\r\n                Имя пользователя\r\n            </th>\r\n            <th>\r\n                Набранные очки\r\n            </th>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction ScoresTable(props) {\r\n\r\n    let content = [];\r\n\r\n    let data = [];\r\n\r\n    for(let i=0; i<localStorage.length; i++) {\r\n        let key = localStorage.key(i);\r\n        data.push({\r\n            key: key,\r\n            value: localStorage.getItem(key),\r\n        });\r\n    }\r\n\r\n    data.sort(function(a, b) {\r\n        let aValue = Number(a.value);\r\n        let bValue = Number(b.value);\r\n        if (aValue > bValue) {\r\n            return -1;\r\n        } else if (aValue < bValue) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    data.forEach(item => {\r\n        content.push(<TableRow name={item.key} scores={item.value} key={item.key}/>);\r\n    });\r\n    \r\n    return (\r\n        <div className=\"wrapper\">\r\n            <table>\r\n                <caption>Таблица рекордов</caption>\r\n                <tbody>\r\n                    <TableHeader />\r\n                    {content}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ScoresTable;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Game from '../components/Game/Game';\r\nimport MainMenu from '../components/mainmenu/MainMenu';\r\nimport ScoresTable from '../components/scorestable/ScoresTable';\r\n\r\nfunction Main(props) {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/SimpleSnake\" component={MainMenu} />\r\n            <Route path=\"/SimpleSnake/game\" component={Game} />\r\n            <Route path=\"/SimpleSnake/scorestable\" component={ScoresTable} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Main;","import React, {Component} from 'react';\r\nimport Main from './routes/Main';\r\nimport './common.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (<Main />);\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}